// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using IDCL.Tacama.Core.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

#nullable disable

namespace IDCL.Tacama.Core.Contexto.Configurations
{
    public partial class ArticuloServConfiguration : IEntityTypeConfiguration<ArticuloTacamaServ>
    {
        public void Configure(EntityTypeBuilder<ArticuloTacamaServ> entity)
        {
            entity.HasKey(e => new { e.IdEmpresa, e.IdArticulo });

            entity.ToTable("ArticuloServ");

            entity.Property(e => e.IdEmpresa)
                .HasColumnName("idEmpresa")
                .HasComment("id de la Empresa");

            entity.Property(e => e.IdArticulo)
                .ValueGeneratedOnAdd()
                .HasColumnName("idArticulo")
                .HasComment("id Articulo se genera en automatico");

            entity.Property(e => e.AltPlataforma)
                .HasColumnType("decimal(12, 2)")
                .HasComment("solo para calzados");

            entity.Property(e => e.Ancho)
                .HasColumnType("decimal(16, 2)")
                .HasComment("dimension del corte del papel o carton");

            entity.Property(e => e.BolExterno)
                .HasColumnType("decimal(12, 2)")
                .HasComment("solo para calzados");

            entity.Property(e => e.BolInterno)
                .HasColumnType("decimal(12, 2)")
                .HasComment("solo para calzados");

            entity.Property(e => e.Calibre)
                .HasColumnType("decimal(16, 2)")
                .HasComment("calibre para el caso de carton");

            entity.Property(e => e.Capacidad)
                .HasColumnType("decimal(15, 3)")
                .HasDefaultValueSql("((0))")
                .HasComment("capacidad en c.c. por ejemplo 750");

            entity.Property(e => e.CodArticulo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codArticulo")
                .HasComment("codigo de Articulo para libre manejo de la empresa codigo interno");

            entity.Property(e => e.CodBarra)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codBarra")
                .HasComment("codigo de Barra 1");

            entity.Property(e => e.CodBarra2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codBarra2")
                .HasComment("codigo de Barra 2");

            entity.Property(e => e.CodBarra3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codBarra3")
                .HasComment("codigo de Barra 3");

            entity.Property(e => e.CodBarra4)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codBarra4")
                .HasComment("codigo de Barra 4");

            entity.Property(e => e.CodBarra5)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codBarra5")
                .HasComment("codigo de Barra 5");

            entity.Property(e => e.CodCapellada)
                .HasColumnName("codCapellada")
                .HasComment("solo para calzados");

            entity.Property(e => e.CodCategoria)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codCategoria")
                .HasComment("codigo de la categoria");

            entity.Property(e => e.CodColor)
                .HasColumnName("codColor")
                .HasComment("codigo del color del articulo");

            entity.Property(e => e.CodEquivalente)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("no se usa");

            entity.Property(e => e.CodEstacion)
                .HasColumnName("codEstacion")
                .HasComment("solo para calzados");

            entity.Property(e => e.CodEstilo)
                .HasColumnName("codEstilo")
                .HasComment("solo para calzados");

            entity.Property(e => e.CodForro)
                .HasColumnName("codForro")
                .HasComment("solo para calzados");

            entity.Property(e => e.CodLineaVenta)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("codLineaVenta")
                .HasComment("codigo de la linea de venta");

            entity.Property(e => e.CodMarca)
                .HasColumnName("codMarca")
                .HasComment("codigo del modelo");

            entity.Property(e => e.CodMaterial)
                .HasColumnName("codMaterial")
                .HasComment("solo para calzados");

            entity.Property(e => e.CodModelo)
                .HasColumnName("codModelo")
                .HasComment("codigo de la marca");

            entity.Property(e => e.CodPlanta)
                .HasColumnName("codPlanta")
                .HasComment("solo para calzados");

            entity.Property(e => e.CodSerie)
                .HasColumnName("codSerie")
                .HasComment("solo para calzados");

            entity.Property(e => e.CodTaco)
                .HasColumnName("codTaco")
                .HasComment("solo para calzados");

            entity.Property(e => e.CodTipoMedAlmacen)
                .HasColumnName("codTipoMedAlmacen")
                .HasComment("Tipo de Unidad de Medida para Almacen");

            entity.Property(e => e.CodTipoMedPresentacion)
                .HasColumnName("codTipoMedPresentacion")
                .HasComment("no se usa para tacama");

            entity.Property(e => e.CodUniMedAlmacen)
                .HasColumnName("codUniMedAlmacen")
                .HasComment("Codigo de Unidad de Medida para Almacen");

            entity.Property(e => e.CodUniMedPresentacion)
                .HasColumnName("codUniMedPresentacion")
                .HasComment("no se usa para tacama");

            entity.Property(e => e.CodigoSunat)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("no se usa");

            entity.Property(e => e.Combinar).HasComment("si el codigo del articulo es automatico se combina de lo contrario no se combina");

            entity.Property(e => e.Compartimiento)
                .HasColumnType("decimal(12, 2)")
                .HasComment("solo para calzados");

            entity.Property(e => e.Contenido)
                .HasColumnType("decimal(15, 2)")
                .HasDefaultValueSql("((0))")
                .HasComment("se usaba para saber el contenido de botellas dentro de una caja");

            entity.Property(e => e.DensidadDesde)
                .HasColumnType("decimal(18, 2)")
                .HasComment("no se usa en tacama");

            entity.Property(e => e.DensidadHasta)
                .HasColumnType("decimal(18, 2)")
                .HasComment("no se usa en tacama");

            entity.Property(e => e.DesColor)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("color del articulo");

            entity.Property(e => e.Extension)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("extension del archivo que contiene la imagen");

            entity.Property(e => e.FecCese)
                .HasColumnType("datetime")
                .HasColumnName("fecCese")
                .HasComment("fecha de cese del articulo");

            entity.Property(e => e.FechaModificacion)
                .HasColumnType("smalldatetime")
                .HasComment("Auditoria");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("smalldatetime")
                .HasComment("Auditoria");

            entity.Property(e => e.FlagActivo)
                .HasColumnName("flagActivo")
                .HasComment("si esta activo o de baja.");

            entity.Property(e => e.Gramaje)
                .HasColumnType("decimal(16, 2)")
                .HasComment("solo para el caso de papel");

            entity.Property(e => e.Horma)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("solo para calzados");

            entity.Property(e => e.IdArticuloBase)
                .HasColumnName("idArticuloBase")
                .HasComment("id del Articulo Base del Producto.");

            entity.Property(e => e.IdConcepto)
                .HasColumnName("idConcepto")
                .HasComment("codigo del concepto asociado a los log_conceptosvarios");

            entity.Property(e => e.IdFormato)
                .HasColumnName("idFormato")
                .HasComment("idFormato de Registro generalmente debe ser 0");

            entity.Property(e => e.IdPartidaPresupuestal).HasComment("id Partida Presupuestal");

            entity.Property(e => e.IdPresentacion)
                .HasColumnName("idPresentacion")
                .HasComment("id de la presentacion por ejemplo no se usa actualmente");

            entity.Property(e => e.IdTipo)
                .HasColumnName("idTipo")
                .HasComment("Clase de articulo con la tabla ClaseArticulo");

            entity.Property(e => e.IdTipoAlmacen)
                .HasColumnName("idTipoAlmacen")
                .HasComment("no se usa");

            entity.Property(e => e.IdTipoArticulo)
                .HasColumnName("idTipoArticulo")
                .HasComment("tipo de articulo se especifica en la tabla partabla grupo=333000");

            entity.Property(e => e.IdTipoMedEnvase)
                .HasColumnName("idTipoMedEnvase")
                .HasComment("no se usa para tacama");

            entity.Property(e => e.IdUniMedEnvase)
                .HasColumnName("idUniMedEnvase")
                .HasComment("no se usa para tacama");

            entity.Property(e => e.IndAfectoIgv)
                .HasColumnName("indAfectoIgv")
                .HasComment("si esta afecto a igv");

            entity.Property(e => e.IndAfectoIsc)
                .HasColumnName("indAfectoIsc")
                .HasComment("si esta afecto a isc");

            entity.Property(e => e.IndCodBarra)
                .HasColumnName("indCodBarra")
                .HasComment("indica si manejara codigo de barras true =SI, false = NO");

            entity.Property(e => e.IndCodEquivalente)
                .HasColumnName("indCodEquivalente")
                .HasComment("no se usa");

            entity.Property(e => e.IndCodSunat)
                .HasColumnName("indCodSunat")
                .HasComment("no se usa");

            entity.Property(e => e.IndCompraDemasia)
                .HasColumnName("indCompraDemasia")
                .HasComment("Para compras con Demasias en Logisticas como las etiquetas");

            entity.Property(e => e.IndConcepto)
                .HasColumnName("indConcepto")
                .HasComment("indicar concepto de servicio o gasto");

            entity.Property(e => e.IndCuero)
                .HasColumnName("indCuero")
                .HasComment("solo para calzados");

            entity.Property(e => e.IndDetraccion)
                .HasColumnName("indDetraccion")
                .HasComment("indica si esta afecto a detraccion");

            entity.Property(e => e.IndLineaVenta)
                .HasColumnName("indLineaVenta")
                .HasDefaultValueSql("((0))")
                .HasComment("indicar linea de Venta");

            entity.Property(e => e.IndMedida)
                .HasColumnName("indMedida")
                .HasComment("indica medida del papel o carton");

            entity.Property(e => e.Largo)
                .HasColumnType("decimal(16, 2)")
                .HasComment("dimension del corte del papel o carton");

            entity.Property(e => e.MedAncho)
                .HasColumnType("decimal(12, 2)")
                .HasComment("solo para calzados");

            entity.Property(e => e.MedLargo)
                .HasColumnType("decimal(12, 2)")
                .HasComment("solo para calzados");

            entity.Property(e => e.NomArticulo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nomArticulo")
                .HasComment("Descripcion del Articulo");

            entity.Property(e => e.NomArticuloEng)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nomArticuloEng")
                .HasComment("Descripcion en Ingles del Articulo para cotizaciones");

            entity.Property(e => e.NomArticuloLargo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nomArticuloLargo")
                .HasComment("nombre largo del Articulo");

            entity.Property(e => e.NomCorto)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nomCorto")
                .HasComment("nombre corto para estadisticos.");

            entity.Property(e => e.NombreImagen)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("nombre de la imagen guardada");

            entity.Property(e => e.NombreReal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("nombre de la imagen real");

            entity.Property(e => e.PesoUnitario)
                .HasColumnType("decimal(18, 6)")
                .HasComment("el Peso por Botella.");

            entity.Property(e => e.PhDesde)
                .HasColumnType("decimal(18, 2)")
                .HasComment("no se usa en tacama");

            entity.Property(e => e.PhHasta)
                .HasColumnType("decimal(18, 2)")
                .HasComment("no se usa en tacama");

            entity.Property(e => e.PorcentajeDemasia)
                .HasColumnType("decimal(6, 2)")
                .HasComment("Porcentajes para las compras con Demasia");

            entity.Property(e => e.Sku)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SKU")
                .HasComment("no se usa");

            entity.Property(e => e.TipDetraccion)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("tipDetraccion")
                .HasComment("tipo de detraccion afecto.");

            entity.Property(e => e.TipoAfectacion).HasComment("tipo de afectacion del articulo");

            entity.Property(e => e.UsuarioModificacion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Auditoria");

            entity.Property(e => e.UsuarioRegistro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Auditoria");

            entity.HasOne(d => d.ArticuloCategorium)
                .WithMany(p => p.ArticuloServs)
                .HasForeignKey(d => new { d.IdEmpresa, d.IdTipoArticulo, d.CodCategoria })
                .HasConstraintName("FK_ArticuloServ_Articulo_Categoria");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<ArticuloTacamaServ> entity);
    }
}
